%package "org.lucylang.ljvm.parser";

%import "org.lucylang.ljvm.node.*";
%import "java.io.IOException";
%import "org.apache.logging.log4j.LogManager";
%import "org.apache.logging.log4j.Logger";

%class "Parser";

%embed {:
    private final Logger logger = LogManager.getLogger(Parser.class.getName());

    public Module parseModule(beaver.Scanner source) throws IOException, Parser.Exception {
        return (Module) super.parse(source);
    }

    public Object parse(Scanner source, short alt_goal_marker_id) throws IOException, Parser.Exception {
        return (Module) super.parse(source, alt_goal_marker_id);
    }

    @Override
    protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
        super.recoverFromError(new Symbol(0), in);
    }
:};

%terminals VAR, FUNC, RETURN, IF, ELSE, WHILE, LCURLY, RCURLY, LPAREN, RPAREN, COMMA,
    ASSIGN, PLUS, MINUS, TIMES, DIV, AND, OR, OR, GT, LT, GEQ, LEQ, EQUAL, NEQ, NOT;
%terminals SEMICOLON, STMT_TAIL;
%terminals BOOL_LITERAL, NONE_LITERAL, NUMBER_LITERAL, ID, STRING_LITERAL;

%left PLUS, MINUS;
%left TIMES, DIV;
%left AND, OR;
%left EQUAL, NEQ;
%left GT, LT, GEQ, LEQ;
%right NOT;

%typeof module = "Module";
%typeof functions = "SymbolList";
%typeof function = "Function";
%typeof parameters = "SymbolList";
%typeof block_statements = "SymbolList";
%typeof statements = "SymbolList";
%typeof var_declarations = "SymbolList";
%typeof assign_statement = "Assignment";
%typeof if_statement = "IfElse";
%typeof if_else_statement = "IfElse";
%typeof call_statement = "Call";
%typeof while_statement = "While";
%typeof return_statement = "Return";
%typeof exprs = "SymbolList";
%typeof expr = "IValue";

%goal module;

maybe_tail = stmt_tails
    |
    ;

stmt_tails = stmt_tails stmt_tail
    |   stmt_tail
    ;

stmt_tail = STMT_TAIL
    |   SEMICOLON
    ;

module = maybe_tail functions.fs maybe_tail
            {: Module module = new Module();
               for(int i=0; i<fs.size(); i++) {
                   module.addFunction((Function) fs.get(i));
               }
               return module;
            :}
    ;

functions = functions.fs maybe_tail function.f
            {: fs.add(f);
               return fs;
            :}
    |   function.f
            {: SymbolList list = new SymbolList();
               list.add(f);
               return list;
            :}
    ;

function = FUNC ID.name LPAREN parameters.list RPAREN block_statements.stmts
            {: Function function = new Function((String) name.value);
               logger.trace("Function " + name.value + " parameters size: " + list.size());
               for(int i=0; i<list.size(); i++) {
                   logger.trace(list.get(i));
                   function.addParameter((VarName) list.get(i));
               }
               for(int i=0; i<stmts.size(); i++) {
                   function.addStmt((IStmt)stmts.get(i));
               }
               return function;
            :}
    |   FUNC ID.name LPAREN RPAREN block_statements.stmts
            {: Function function = new Function((String) name.value);
               logger.trace("Function " + name.value + " parameters size: 0");
               for(int i=0; i<stmts.size(); i++) {
                   function.addStmt((IStmt)stmts.get(i));
               }
               return function;
            :}
    ;

parameters = parameters.list COMMA ID.varName
            {: list.add(new VarName((String) varName.value));
               return list;
            :}
    |   ID.varName
            {: SymbolList list = new SymbolList();
               list.add(new VarName((String) varName.value));
               return list;
            :}
    ;

block_statements = LCURLY maybe_tail statements.stmts maybe_tail RCURLY
            {: return stmts; :}
    |   LCURLY maybe_tail RCURLY
            {: return new SymbolList(); :}
    ;

statements = statements.stmts stmt_tails statement.stmt
            {: if(stmt instanceof SymbolList) {
                   SymbolList list = (SymbolList) stmt;
                   for(int i=0; i<list.size(); i++) {
                       stmts.add(list.get(i));
                   }
               } else {
                   stmts.add(stmt);
               }
               return stmts;
            :}
    |   statement.stmt
            {: if(stmt instanceof SymbolList) {
                   return stmt;
               } else {
                   SymbolList list = new SymbolList();
                   list.add(stmt);
                   return list;
               }
            :}
    ;

statement = var_statement.var
            {: return var; :}
    |   assign_statement.assign
            {: return assign; :}
    |   if_statement.ifStmt
            {: return ifStmt; :}
    |   if_else_statement.ifStmt
            {: return ifStmt; :}
    |   while_statement.whileStmt
            {: return whileStmt; :}
    |   call_statement.call
            {: return call; :}
    |   return_statement.returnStmt
            {: return returnStmt; :}
    ;

var_statement = VAR var_declarations.declarations
            {: return declarations; :}
    ;

var_declarations = var_declarations.declarations COMMA var_declaration.var
            {: declarations.add(var);
               return declarations;
            :}
    |   var_declaration.var
            {: SymbolList list = new SymbolList();
               list.add(var);
               return list;
            :}
    ;

var_declaration = ID.varName
            {: return new Assignment(new VarName((String) varName.value), new NoneLiteral());
            :}
    |   assign_statement.assignment
            {: return assignment;
            :}
    ;

assign_statement = ID.varName ASSIGN expr.value
            {: return new Assignment(new VarName((String) varName.value), value);
            :}
    ;

if_statement = IF expr.value block_statements.statements
            {: IfElse ifElse = new IfElse(value);
               for(int i=0; i<statements.size(); i++)
                   ifElse.addStmtIf((IStmt) statements.get(i));
               return ifElse;
            :}
    ;

if_else_statement = if_statement.ifElse ELSE block_statements.statements
            {: for(int i=0; i<statements.size(); i++)
                   ifElse.addStmtElse((IStmt) statements.get(i));
               return ifElse;
            :}
    ;

call_statement = ID.name LPAREN exprs.list RPAREN
            {: Call call = new Call(new VarName((String) name.value));
               for(int i=0; i<list.size(); i++) {
                   call.addParameter((IValue) list.get(i));
               }
               return call;
            :}
    |   ID.name LPAREN RPAREN
            {:  return new Call(new VarName((String) name.value)); :}
    ;

exprs = exprs.list COMMA expr.value
            {: list.add((Node) value);
               return list;
            :}
    |   expr.value
            {: SymbolList list = new SymbolList();
               list.add((Node) value);
               return list;
            :}
    ;

while_statement = WHILE expr.value block_statements.statements
            {: While whileStmt = new While(value);
               for(int i=0; i<statements.size(); i++)
                   whileStmt.addStmt((IStmt) statements.get(i));
               return whileStmt;
            :}
    ;

return_statement = RETURN
            {: return new Return(); :}
    |   RETURN expr.value
            {: return new Return(value); :}
    ;

expr = literal_expr.literal
            {: return literal;
            :}
    |   ID.id
            {: String value = (String) id.value;
               return new VarName(value);
            :}
    |   expr.left PLUS expr.right
            {:  return new AddExpr(left, right);
            :}
    |   expr.left MINUS expr.right
            {:  return new SubExpr(left, right);
            :}
    |   expr.left TIMES expr.right
            {:  return new MulExpr(left, right);
            :}
    |   expr.left DIV expr.right
            {:  return new DivExpr(left, right);
            :}
    |   expr.left AND expr.right
            {:  return new AndExpr(left, right);
            :}
    |   expr.left OR expr.right
            {:  return new OrExpr(left, right);
            :}
    |   expr.left EQUAL expr.right
            {:  return new EquExpr(left, right);
            :}
    |   expr.left NEQ expr.right
            {:  return new NotExpr(new EquExpr(left, right));
            :}
    |   expr.left GT expr.right
            {:  return new GreExpr(left, right);
            :}
    |   expr.left LT expr.right
            {:  return new LesExpr(left, right);
            :}
    |   expr.left GEQ expr.right
            {:  return new GeqExpr(left, right);
            :}
    |   expr.left LEQ expr.right
            {:  return new LeqExpr(left, right);
            :}
    |   NOT expr.left
            {:  return new NotExpr(left);
            :}
    |   LPAREN expr.left RPAREN
            {:  return (Node) left;
            :}
    |   call_statement.call
            {:  return (Node) call;
            :}
    ;

literal_expr = BOOL_LITERAL.bool
            {: if(bool.value.equals("true")) {
                   return new BooleanLiteral(true);
               } else {
                   return new BooleanLiteral(false);
               }
            :}
    |   NUMBER_LITERAL.number
            {: String value = (String) number.value;
               if(value.contains(".")) {
                   return new NumberLiteral(Double.parseDouble(value));
               } else {
                   return new NumberLiteral(Integer.parseInt(value));
               }
            :}
    |   STRING_LITERAL.string
            {: String value = (String) string.value;
               return new StringLiteral(value);
            :}
    |   NONE_LITERAL.none
            {: return new NoneLiteral();
            :}
    ;